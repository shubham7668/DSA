//Will use hashmap for optimisation 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       int n=nums.size();
        vector<int> ans;
        
        // for(int i=0;i<n-1;i++){
        //     for(int j=i+1;j<n;j++){
        //         if((nums[i]+nums[j])==target){
        //             ans.push_back(i);
        //             ans.push_back(j);
        //             break;
        //         }
        //     }
        // }
        // return ans;
        
        unordered_map<int,int> umap;
        
        for(int i=0;i<n;i++){
            
            if(umap.find(target-nums[i]) != umap.end()){
                ans.push_back(umap[target-nums[i]]);
                ans.push_back(i);
                return ans;
            }
            //Value <-> Index     (Mapping)
            umap[nums[i]]=i;
        }
        return ans;
    }
};
